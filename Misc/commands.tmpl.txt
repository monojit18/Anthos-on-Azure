Anthos on GCP
==============
gcloud container clusters get-credentials gke-ant-cluster --project=$PROJECTID
gke-lb-url-map
gcloud container fleet memberships register gke-fleet --gke-cluster=$LOCATION/$CLUSTERNAME --enable-workload-identity
gcloud services enable krmapihosting.googleapis.com container.googleapis.com cloudresourcemanager.googleapis.com --project=$PROJECTID
gcloud anthos config controller create gke-config-ctr --location=asia-southeast1

Anthos on Azure
==============
az login
az group create --name gke-anthos-rg --location eastus

az network vnet create \
  --name gke-anthos-vnet \
  --location eastus \
  --resource-group gke-anthos-rg \
  --address-prefixes 10.2.0.0/16 \
  --subnet-name anthos-cluster-subnet \
  --subnet-prefix 10.2.0.0/22

az network public-ip create \
  --name gke-anthos-ngw-ip \
  --location eastus \
  --resource-group gke-anthos-rg \
  --allocation-method Static \
  --sku Standard

az network nat gateway create \
  --name gke-anthos-ngw \
  --location eastus \
  --resource-group gke-anthos-rg \
  --public-ip-addresses gke-anthos-ngw-ip \
  --idle-timeout 10

az network vnet subnet update \
  --name anthos-cluster-subnet \
  --vnet-name gke-anthos-vnet \
  --resource-group gke-anthos-rg \
  --nat-gateway gke-anthos-ngw
===============================================
az ad app create --display-name gke-anthos-app

APPLICATION_ID=$(az ad app list --all \
 --query "[?displayName=='gke-anthos-app'].appId" \
 --output tsv)

az ad sp create --id "${APPLICATION_ID}"

APPLICATION_ID=$(az ad app list --all \
    --query "[?displayName=='gke-anthos-app'].appId" \
    --output tsv)
SERVICE_PRINCIPAL_ID=$(az ad sp list --all  --output tsv \
      --query "[?appId=='$APPLICATION_ID'].id")
SUBSCRIPTION_ID=$(az account show --query "id" --output tsv)
TENANT_ID=$(az account list \
  --query "[?id=='${SUBSCRIPTION_ID}'].{tenantId:tenantId}" --output tsv)
echo $APPLICATION_ID $SERVICE_PRINCIPAL_ID $SUBSCRIPTION_ID $TENANT_ID

RESOURCE_GROUP="gke-anthos-rg"
az role assignment create \
  --role "Contributor" \
  --assignee "${APPLICATION_ID}" \
  --scope "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/$RESOURCE_GROUP"

az role assignment create \
  --role "User Access Administrator" \
  --assignee "${APPLICATION_ID}" \
  --scope "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/$RESOURCE_GROUP"  

az role assignment create \
  --role "Key Vault Administrator" \
  --assignee "${APPLICATION_ID}" \
  --scope "/subscriptions/${SUBSCRIPTION_ID}/resourceGroups/$RESOURCE_GROUP"

#https://cloud.google.com/anthos/clusters/docs/multi-cloud/azure/reference/supported-regions

gcloud services enable gkemulticloud.googleapis.com --project=$PROJECT_ID
GCP_REGION="us-east4"
BASEPATH="/Users/monojitdatta/Workloads/Development/Projects/GCP-Projects/GCPApps"

gcloud container azure clients create gke-anthos-client \
  --location=$GCP_REGION \
  --tenant-id="${TENANT_ID}" \
  --application-id="${APPLICATION_ID}"
Created Azure Client [https://us-east4-gkemulticloud.googleapis.com/v1/projects/apps-project-3108449/locations/us-east4/azureClients/gke-anthos-client].

CERT=$(gcloud container azure clients get-public-cert --location=$GCP_REGION gke-anthos-client)
-----BEGIN CERTIFICATE----- <data> -----END CERTIFICATE-----

az ad app credential reset --id "${APPLICATION_ID}" --cert "${CERT}" --append

ssh-keygen -t rsa -m PEM -b 4096 -C "GKE Anthos on Azure" -f $BASEPATH/Misc/gke-ssh-key -N "" 1>/dev/null
SSH_PUBLIC_KEY=$(cat $BASEPATH/Misc/gke-ssh-key.pub)

CLUSTER_RESOURCE_GROUP_ID=$(az group show --query id --output tsv --resource-group=$RESOURCE_GROUP)

VNET_ID=$(az network vnet show --query id --output tsv --resource-group=$RESOURCE_GROUP --name=gke-anthos-vnet)
SUBNET_ID=$(az network vnet subnet show --query id --output tsv \
--resource-group=$RESOURCE_GROUP --vnet-name=gke-anthos-vnet --name=anthos-cluster-subnet)

POD_CIDR_BLOCK="10.3.0.0/16"
SERVICE_CIDR_BLOCK="10.4.0.0/16"
CLUSTER="gke-azure-cluster"
VERSION="1.24.5-gke.200"
USER=$(gcloud auth list --filter="account:admin*" --format="value(account)")

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:$PROJECT_ID.svc.id.goog[gke-system/gke-telemetry-agent]" \
  --role=roles/gkemulticloud.telemetryWriter

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:apps-project-sa@$PROJECT_ID.iam.gserviceaccount.com" \
  --role=roles/gkehub.gatewayAdmin

gcloud projects add-iam-policy-binding $PROJECT_ID \
  --member="serviceAccount:apps-project-sa@$PROJECT_ID.iam.gserviceaccount.com" \
  --role=roles/gkehub.viewer

gcloud projects add-iam-policy-binding $PROJECT_ID \
--member="user:$USER" --role=roles/gkehub.gatewayAdmin

gcloud projects add-iam-policy-binding $PROJECT_ID \
--member="user:$USER" --role=roles/gkehub.viewer

gcloud container azure clusters create $CLUSTER \
    --cluster-version $VERSION \
    --azure-region eastus --location $GCP_REGION \
    --fleet-project $PROJECT_ID \
    --client gke-anthos-client \
    --resource-group-id $CLUSTER_RESOURCE_GROUP_ID \
    --vnet-id $VNET_ID \
    --subnet-id $SUBNET_ID \
    --pod-address-cidr-blocks $POD_CIDR_BLOCK \
    --service-address-cidr-blocks $SERVICE_CIDR_BLOCK \
    --ssh-public-key "${SSH_PUBLIC_KEY}" \
    --tags "control-plane=$CLUSTER" \
    --admin-users $USER
#gcloud container azure clusters delete $CLUSTER --location=$GCP_REGION
/*
ERROR: (gcloud.container.azure.clusters.create) INVALID_ARGUMENT: invalid version: \
"1.24.5-gke.600", supported values are [1.24.5-gke.200 1.24.3-gke.2100 1.23.11-gke.300 \
1.23.9-gke.2100 1.23.9-gke.800 1.23.8-gke.1700 1.23.7-gke.1300 1.22.15-gke.100 1.22.12-gke.2300\
1.22.12-gke.1100 1.22.12-gke.200 1.22.10-gke.1500 1.22.8-gke.2100 1.21.14-gke.2900 1.21.14-gke.2100 \
1.21.11-gke.1900 1.21.11-gke.1800 1.21.6-gke.1500 1.21.5-gke.2800], \
field: azure_cluster.control_plane.version
*/

gcloud container azure node-pools create system-pool \
    --cluster $CLUSTER \
    --location $GCP_REGION \
    --node-version $VERSION \
    --vm-size Standard_DS4_v2 \
    --max-pods-per-node 50 \
    --min-nodes 3 \
    --max-nodes 5 \
    --ssh-public-key "${SSH_PUBLIC_KEY}" \
    --subnet-id $SUBNET_ID
#gcloud container azure node-pools delete system-pool --cluster=$CLUSTER  --location=$GCP_REGION

gcloud container azure clusters describe gke-azure-cluster --location=$GCP_REGION
gcloud container azure clusters get-credentials gke-azure-cluster --location=$GCP_REGION

gcloud container azure node-pools list --cluster=$CLUSTER --location=$GCP_REGION

gcloud container azure clusters describe $CLUSTER --location=$GCP_REGION --format='value(authorization.admin_users)'
gcloud container azure clusters describe $CLUSTER --location=$GCP_REGION --format='value(workloadIdentityConfig.identityProvider)'

kubectl create secret docker-registry registry-secret \
--docker-server=asia-southeast1-docker.pkg.dev \
--docker-username=_json_key \
--docker-email=apps-project-sa@apps-project-3108449.iam.gserviceaccount.com \
--docker-password="$(cat $BASEPATH/Misc/apps-project-sa.json)"

kubectl create deployment hello-deploy --image=asia-southeast1-docker.pkg.dev/apps-project-3108449/cloud-native-apps-repo/httpd:latest \
--dry-run=client -o yaml > hello-deploy.yaml
kubectl expose deployment hello-deploy --name hello-svc --type LoadBalancer --port 80 --dry-run=client -o yaml > hello-svc.yaml

kubectl create deployment nginx-deploy --image=asia-southeast1-docker.pkg.dev/apps-project-3108449/cloud-native-apps-repo/nginx:latest \
--dry-run=client -o yaml > nginx-deploy.yaml
kubectl expose deployment nginx-deploy --name nginx-svc --type LoadBalancer --port 80 --dry-run=client -o yaml > nginx-svc.yaml